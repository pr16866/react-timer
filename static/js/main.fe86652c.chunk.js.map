{"version":3,"sources":["index.js"],"names":["RenderTime","_ref","remainingTime","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","options","SetlectReset","_ref2","onClickReset","props","_useState","useState","_useState2","Object","C_Users_DELL_Downloads_intern_assign_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","timerState","setTimerState","style","display","onChange","e","target","value","map","opt","key","onClick","App","_useState3","_useState4","href","rel","react_countdown_circle_timer__WEBPACK_IMPORTED_MODULE_3__","isPlaying","duration","onComplete","colors","val","rootElement","document","getElementById","ReactDOM","render"],"mappings":"wMAMMA,SAAa,SAAAC,GAAuB,IAApBC,EAAoBD,EAApBC,cAEpB,OAAsB,IAAlBA,EACKC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,eAIPH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,aACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,GACxBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,cAKAC,EAAU,CAAC,GAAI,GAAI,GAAI,GAAI,IAE3BC,EAAe,SAAAC,GAAe,IAC1BC,EAD0BD,EAAZE,MACdD,aACRE,EAAoCC,mBAAS,IAA7CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOK,EAAPH,EAAA,GAAmBI,EAAnBJ,EAAA,GAIA,OACEX,EAAAC,EAAAC,cAAA,OAAKc,MAAO,CAAEC,QAAS,SACrBjB,EAAAC,EAAAC,cAAA,UAAQgB,SALS,SAACC,GACpBJ,EAAcI,EAAEC,OAAOC,SAKlBjB,EAAQkB,IAAI,SAACC,GAAD,OACXvB,EAAAC,EAAAC,cAAA,UAAQmB,MAAOE,EAAKC,IAAKD,GACtBA,EAAM,WAIbvB,EAAAC,EAAAC,cAAA,UAAQuB,QAAS,kBAAIlB,EAAaO,KAAlC,WAKN,SAASY,IACP,IAAAC,EAAoCjB,mBAAS,IAA7CkB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAAOb,EAAPc,EAAA,GAAmBb,EAAnBa,EAAA,GAMA,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACE2B,KAAK,4BACLT,OAAO,SACPU,IAAI,uBAHN,cAOA9B,EAAAC,EAAAC,cAAA,WARF,sBAWAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAC6B,EAAA,qBAAD,CACEC,WAAS,EAETR,IAAKV,EACLmB,SAAUnB,EACVoB,WAAY,iBAAM,EAAC,EAAM,IAAKnB,EAAc,MAC5CoB,OAAQ,CAAC,CAAC,UAAW,KAAO,CAAC,UAAW,KAAO,CAAC,aAE/CnC,EAAAC,EAAAC,cAACL,EAAD,OAEHG,EAAAC,EAAAC,cAACG,EAAD,CAAcG,MAAO,CAAED,aA5BR,SAAC6B,GACpBrB,EAAcqB,OA4BVpC,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,sFAQR,IAAMmC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwB,EAAD,MAASW","file":"static/js/main.fe86652c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nimport \"./styles.css\";\n\nconst RenderTime = ({ remainingTime }) => {\n \n  if (remainingTime === 0) {\n    return <div className=\"timer\">Too lale...</div>;\n  }\n\n  return (\n    <div className=\"timer\">\n      <div className=\"text\">Remaining</div>\n      <div className=\"value\">{remainingTime}</div>\n      <div className=\"text\">seconds</div>\n    </div>\n  );\n};\n\nconst options = [10, 20, 30, 40, 50];\n\nconst SetlectReset = ({ props }) => {\n  const { onClickReset } = props;\n  const [timerState, setTimerState] = useState(10);\n  const handleChange = (e) => {\n    setTimerState(e.target.value);\n  }\n  return (\n    <div style={{ display: \"flex\" }}>\n      <select onChange={handleChange}>\n        {options.map((opt) => (\n          <option value={opt} key={opt}>\n            {opt + \" sec\"}\n          </option>\n        ))}\n      </select>\n      <button onClick={()=>onClickReset(timerState)}>Reset</button>\n    </div>\n  );\n};\n\nfunction App() {\n  const [timerState, setTimerState] = useState(10);\n  \n  const onClickReset = (val) => {\n    setTimerState(val);\n  };\n  \n  return (\n    <div className=\"App\">\n      <h1>\n        <a\n          href=\"https://www.reactlabs.ai/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          React Labs\n        </a>\n        <br />\n        ReactJS Assignment\n      </h1>\n      <div className=\"timer-wrapper\">\n        <CountdownCircleTimer\n          isPlaying\n         \n          key={timerState}\n          duration={timerState}\n          onComplete={() => [true, 1000,setTimerState(10)]}\n          colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}   \n        >\n          {<RenderTime/>}\n        </CountdownCircleTimer>\n        <SetlectReset props={{ onClickReset }} />\n        <h3>Can you get this reset button to work?</h3>\n        <h4>\n          The reset button should reset as per the time selected in the dropdown\n        </h4>\n      </div>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}